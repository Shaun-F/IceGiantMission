std::cout << "Cos Inclication: " << myParams.cosIota << std::endl;
Timer myTime;
std::cout << "Psi S for mission (t=12.5) " << myParams.mission << ": ";
std::cout << psiS(myParams, 12.5) << std::endl;
std::cout << "Phi S (t=12.5): ";
std::cout << phiS(myParams.thetaS,myParams.phiS, 12.5);
std::cout << "\ncos_Theta S (t=12.5): ";
std::cout << cosThetaS(myParams.thetaS,myParams.phiS, 12.5);
std::cout << "\n\ntime dep pattern funcs LISA: ";
std::cout << myBinary.timedepPatternFunctions(myParams, 0)[0] << ' ' << myBinary.timedepPatternFunctions(myParams, 0)[1]<<std::endl;
std::cout << "\n\nGW Amplitude (LISA): \n";
for (auto el: myBinary.getGWAmplitude()){
  std::cout << el;
};
std::cout << "\n\nAmplitude (Lisa): ";
std::cout << myBinary.Amplitude(myParams, 0.0)<<std::endl;
std::cout << "\n\n polarization Phase (Lisa) : ";
std::cout << myBinary.polarizationPhase(myParams, 0.0)<<std::endl;
std::cout << "\n\n GW Frequency t=1e9 (Lisa): ";
std::cout << myBinary.gwFrequency(myParams, 1e9)<<std::endl;
std::cout << "\n\n doppler Phase (Lisa) : ";
std::cout << myBinary.dopplerPhase(myParams, 0.0)<<std::endl;
std::cout << "\n\n GW Phase (Lisa) (t=12.5): ";
std::cout << myBinary.phase(myParams, 12.5)<<std::endl;
std::cout << "\n\n GW strain (Lisa) (t=12.5): ";
std::cout << myBinary.strain(myParams, 12.5)<<std::endl;
std::cout << "\n\n dFreq strain (Lisa) (t=12.5, i=K,P,phiP,f0,f1): ";
std::cout << myBinary.freqDeriv(myParams,ParameterVariables::K, 12.5)<< "   "<<myBinary.freqDeriv(myParams,ParameterVariables::P, 12.5)<< "   "<<myBinary.freqDeriv(myParams,ParameterVariables::phiP, 12.5)<< "  "<<myBinary.freqDeriv(myParams,ParameterVariables::f0, 12.5)<< "  "<<myBinary.freqDeriv(myParams,ParameterVariables::f1, 12.5)<<std::endl;
std::cout << "\n\n dFreqInt strain (Lisa) (t=12.5, i=K,P,phiP,f0,f1): ";
std::cout << myBinary.freqDerivInt(myParams,ParameterVariables::K, 12.5)<< "   "<<myBinary.freqDerivInt(myParams,ParameterVariables::P, 12.5)<< "   "<<myBinary.freqDerivInt(myParams,ParameterVariables::phiP, 12.5)<< "  "<<myBinary.freqDerivInt(myParams,ParameterVariables::f0, 12.5)<< "  "<<myBinary.freqDerivInt(myParams,ParameterVariables::f1, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain K (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::K, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain P (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::P, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain phiP (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::phiP, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain thetaS (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::thetaS, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain thetaL (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::thetaL, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain phiS (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::phiS, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain phiL (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::phiL, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain f1 (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::f1, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain f0 (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::f0, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain lnA (Lisa) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::lnA, 12.5)<<std::endl;

myParams.mission = "IceGiant";
std::cout << "-------------------IceGiant-----------------"<<std::endl;
std::cout << "Psi S for mission (t=12.5) " << myParams.mission << ": ";
std::cout << psiS(myParams, 12.5) << std::endl;
std::cout << "\n\ntime dep pattern funcs IceGiant: ";
std::cout << myBinary.timedepPatternFunctions(myParams, 0)[0] << ' ' << myBinary.timedepPatternFunctions(myParams, 0)[1]<<std::endl;
std::cout << "\n\nGW Amplitude (IceGiant): \n";
for (auto el: myBinary.getGWAmplitude()){
  std::cout << el<<" ";
};
std::cout << "\n\nAmplitude (IceGiant): ";
std::cout << myBinary.Amplitude(myParams, 0.0)<<std::endl;
std::cout << "\n\n polarization Phase (IceGiant) : ";
std::cout << myBinary.polarizationPhase(myParams, 0.0)<<std::endl;
std::cout << "\n\n GW Frequency t=1e9 (IceGiant): ";
std::cout << myBinary.gwFrequency(myParams, 1e9)<<std::endl;
std::cout << "\n\n doppler Phase (IceGiant) : ";
std::cout << myBinary.dopplerPhase(myParams, 0.0)<<std::endl;
std::cout << "\n\n GW Phase (IceGiant) (t=12.5): ";
std::cout << myBinary.phase(myParams, 12.5)<<std::endl;
std::cout << "\n\n GW strain (IceGiant) (t=12.5): ";
std::cout << myBinary.strain(myParams, 12.5)<<std::endl;
std::cout << "\n\n GW psiBar (IceGiant) (t=12.5): ";
std::cout << myBinary.psiBar(myParams, 12.5)<<std::endl;
std::cout << "\n\n GW dPsiBar (IceGiant) (t=12.5): ";
std::cout << myBinary.dPsiBar(myParams, 12.5)<<std::endl;
std::cout << "\n\n dFreq strain (IceGiant) (t=12.5, i=K,P,phiP,f0,f1): ";
std::cout << myBinary.freqDeriv(myParams,ParameterVariables::K, 12.5)<< "   "<<myBinary.freqDeriv(myParams,ParameterVariables::P, 12.5)<< "   "<<myBinary.freqDeriv(myParams,ParameterVariables::phiP, 12.5)<< "  "<<myBinary.freqDeriv(myParams,ParameterVariables::f0, 12.5)<< "  "<<myBinary.freqDeriv(myParams,ParameterVariables::f1, 12.5)<<std::endl;
std::cout << "\n\n dFreqInt strain (IceGiant) (t=12.5, i=K,P,phiP,f0,f1): ";
std::cout << myBinary.freqDerivInt(myParams,ParameterVariables::K, 12.5)<< "   "<<myBinary.freqDerivInt(myParams,ParameterVariables::P, 12.5)<< "   "<<myBinary.freqDerivInt(myParams,ParameterVariables::phiP, 12.5)<< "  "<<myBinary.freqDerivInt(myParams,ParameterVariables::f0, 12.5)<< "  "<<myBinary.freqDerivInt(myParams,ParameterVariables::f1, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain K (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::K, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain P (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::P, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain phiP (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::phiP, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain thetaS (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::thetaS, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain thetaL (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::thetaL, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain phiS (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::phiS, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain phiL (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::phiL, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain f1 (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::f1, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain f0 (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::f0, 12.5)<<std::endl;
std::cout << "\n\n derivative GW strain lnA (IceGiant) (t=12.5): ";
std::cout << myBinary.dStrain(myParams,ParameterVariables::lnA, 12.5)<<std::endl;


std::cout << "########\n Time to calculate functions: " << myTime.elapsed() << "\n########"<<std::endl;
