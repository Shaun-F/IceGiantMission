# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _icegiant
else:
    import _icegiant

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class LISA(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _icegiant.LISA_swiginit(self, _icegiant.new_LISA(*args))

    def LoadTransfer(self, file_name, transferdata):
        return _icegiant.LISA_LoadTransfer(self, file_name, transferdata)

    def EvaluateTransfer(self, frequency):
        return _icegiant.LISA_EvaluateTransfer(self, frequency)

    def strainPSD(self, freq):
        return _icegiant.LISA_strainPSD(self, freq)

    def snC(self, freq):
        return _icegiant.LISA_snC(self, freq)

    def sN(self, freq):
        return _icegiant.LISA_sN(self, freq)

    def pn_WC(self, freq):
        return _icegiant.LISA_pn_WC(self, freq)

    def patternFunctions(self, *args):
        return _icegiant.LISA_patternFunctions(self, *args)

    def timedepPatternFunctions(self, arg2, arg3):
        return _icegiant.LISA_timedepPatternFunctions(self, arg2, arg3)
    __swig_destroy__ = _icegiant.delete_LISA

# Register LISA in _icegiant:
_icegiant.LISA_swigregister(LISA)
class Binary(LISA):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, params):
        _icegiant.Binary_swiginit(self, _icegiant.new_Binary(params))

    def getChirpMass(self):
        return _icegiant.Binary_getChirpMass(self)

    def getGWAmplitude(self):
        return _icegiant.Binary_getGWAmplitude(self)

    def GWAmplitudes(self, arg2):
        return _icegiant.Binary_GWAmplitudes(self, arg2)

    def FrequencyK(self, arg2):
        return _icegiant.Binary_FrequencyK(self, arg2)

    def Separation(self, arg2):
        return _icegiant.Binary_Separation(self, arg2)

    def Amplitude(self, arg2, arg3):
        return _icegiant.Binary_Amplitude(self, arg2, arg3)

    def polarizationPhase(self, arg2, arg3):
        return _icegiant.Binary_polarizationPhase(self, arg2, arg3)

    def dopplerPhase(self, arg2, arg3):
        return _icegiant.Binary_dopplerPhase(self, arg2, arg3)

    def gwFrequency(self, arg2, arg3):
        return _icegiant.Binary_gwFrequency(self, arg2, arg3)

    def phase(self, arg2, arg3):
        return _icegiant.Binary_phase(self, arg2, arg3)

    def strain(self, arg2, arg3):
        return _icegiant.Binary_strain(self, arg2, arg3)

    def freqDeriv(self, arg2, arg3, arg4):
        return _icegiant.Binary_freqDeriv(self, arg2, arg3, arg4)

    def freqDerivInt(self, arg2, arg3, arg4):
        return _icegiant.Binary_freqDerivInt(self, arg2, arg3, arg4)

    def dStrain(self, arg2, arg3, arg4):
        return _icegiant.Binary_dStrain(self, arg2, arg3, arg4)

    def lineOfSightAngle(self, arg2):
        return _icegiant.Binary_lineOfSightAngle(self, arg2)

    def detectorStrain(self, arg2, arg3):
        return _icegiant.Binary_detectorStrain(self, arg2, arg3)

    def psiBar(self, arg2, arg3):
        return _icegiant.Binary_psiBar(self, arg2, arg3)

    def dPsiBar(self, arg2, arg3):
        return _icegiant.Binary_dPsiBar(self, arg2, arg3)
    __swig_destroy__ = _icegiant.delete_Binary

# Register Binary in _icegiant:
_icegiant.Binary_swigregister(Binary)

def isClose(a, b, rel_tol=1e-4, abs_tol=0.0):
    return _icegiant.isClose(a, b, rel_tol, abs_tol)

def cosThetaS(arg1, arg2, arg3):
    return _icegiant.cosThetaS(arg1, arg2, arg3)

def CosIota(arg1):
    return _icegiant.CosIota(arg1)

def phiS(arg1, arg2, arg3):
    return _icegiant.phiS(arg1, arg2, arg3)

def psiS(*args):
    return _icegiant.psiS(*args)

def Sqrt(arg1):
    return _icegiant.Sqrt(arg1)

def Sin(arg1):
    return _icegiant.Sin(arg1)

def Cos(arg1):
    return _icegiant.Cos(arg1)

def Power(arg1, arg2):
    return _icegiant.Power(arg1, arg2)

def ArcTan(*args):
    return _icegiant.ArcTan(*args)

def paramVarToString(var):
    return _icegiant.paramVarToString(var)

def cassiniPSD(arg1, arg2):
    return _icegiant.cassiniPSD(arg1, arg2)
class Timer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def reset(self):
        return _icegiant.Timer_reset(self)

    def elapsed(self):
        return _icegiant.Timer_elapsed(self)

    def __init__(self):
        _icegiant.Timer_swiginit(self, _icegiant.new_Timer())
    __swig_destroy__ = _icegiant.delete_Timer

# Register Timer in _icegiant:
_icegiant.Timer_swigregister(Timer)
cvar = _icegiant.cvar
PI = cvar.PI
AU = cvar.AU
pc = cvar.pc
yr = cvar.yr
day = cvar.day
MJ = cvar.MJ
MS = cvar.MS
Gnewt = cvar.Gnewt
C = cvar.C
rS = cvar.rS
omegaE = cvar.omegaE

ParameterVariables_K = _icegiant.ParameterVariables_K
ParameterVariables_P = _icegiant.ParameterVariables_P
ParameterVariables_phiP = _icegiant.ParameterVariables_phiP
ParameterVariables_thetaS = _icegiant.ParameterVariables_thetaS
ParameterVariables_phiS = _icegiant.ParameterVariables_phiS
ParameterVariables_thetaL = _icegiant.ParameterVariables_thetaL
ParameterVariables_phiL = _icegiant.ParameterVariables_phiL
ParameterVariables_lnA = _icegiant.ParameterVariables_lnA
ParameterVariables_f1 = _icegiant.ParameterVariables_f1
ParameterVariables_f0 = _icegiant.ParameterVariables_f0
ParameterVariables_NUM_Variables = _icegiant.ParameterVariables_NUM_Variables
class analysisParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PeriodList = property(_icegiant.analysisParams_PeriodList_get, _icegiant.analysisParams_PeriodList_set)

    def __init__(self):
        _icegiant.analysisParams_swiginit(self, _icegiant.new_analysisParams())
    __swig_destroy__ = _icegiant.delete_analysisParams

# Register analysisParams in _icegiant:
_icegiant.analysisParams_swigregister(analysisParams)
class params(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    thetaL = property(_icegiant.params_thetaL_get, _icegiant.params_thetaL_set)
    phiL = property(_icegiant.params_phiL_get, _icegiant.params_phiL_set)
    thetaS = property(_icegiant.params_thetaS_get, _icegiant.params_thetaS_set)
    phiS = property(_icegiant.params_phiS_get, _icegiant.params_phiS_set)
    M1 = property(_icegiant.params_M1_get, _icegiant.params_M1_set)
    M2 = property(_icegiant.params_M2_get, _icegiant.params_M2_set)
    MP = property(_icegiant.params_MP_get, _icegiant.params_MP_set)
    P = property(_icegiant.params_P_get, _icegiant.params_P_set)
    Tobs = property(_icegiant.params_Tobs_get, _icegiant.params_Tobs_set)
    Larm = property(_icegiant.params_Larm_get, _icegiant.params_Larm_set)
    thetaP = property(_icegiant.params_thetaP_get, _icegiant.params_thetaP_set)
    phiP = property(_icegiant.params_phiP_get, _icegiant.params_phiP_set)
    freqGW = property(_icegiant.params_freqGW_get, _icegiant.params_freqGW_set)
    sourceDistance = property(_icegiant.params_sourceDistance_get, _icegiant.params_sourceDistance_set)
    cosIota = property(_icegiant.params_cosIota_get, _icegiant.params_cosIota_set)
    gravAmplitude = property(_icegiant.params_gravAmplitude_get, _icegiant.params_gravAmplitude_set)
    DerivativeDelta = property(_icegiant.params_DerivativeDelta_get, _icegiant.params_DerivativeDelta_set)
    chirpMass = property(_icegiant.params_chirpMass_get, _icegiant.params_chirpMass_set)
    f1 = property(_icegiant.params_f1_get, _icegiant.params_f1_set)
    K = property(_icegiant.params_K_get, _icegiant.params_K_set)
    a0 = property(_icegiant.params_a0_get, _icegiant.params_a0_set)
    ig_direction = property(_icegiant.params_ig_direction_get, _icegiant.params_ig_direction_set)
    LineOfSightAngle = property(_icegiant.params_LineOfSightAngle_get, _icegiant.params_LineOfSightAngle_set)
    lightTwoWayTime = property(_icegiant.params_lightTwoWayTime_get, _icegiant.params_lightTwoWayTime_set)
    PSDlevel = property(_icegiant.params_PSDlevel_get, _icegiant.params_PSDlevel_set)
    allanDeviation = property(_icegiant.params_allanDeviation_get, _icegiant.params_allanDeviation_set)
    relativeSNR = property(_icegiant.params_relativeSNR_get, _icegiant.params_relativeSNR_set)
    periodSamples = property(_icegiant.params_periodSamples_get, _icegiant.params_periodSamples_set)
    NC = property(_icegiant.params_NC_get, _icegiant.params_NC_set)
    LISAAlpha = property(_icegiant.params_LISAAlpha_get, _icegiant.params_LISAAlpha_set)
    mode = property(_icegiant.params_mode_get, _icegiant.params_mode_set)
    gwAmplitude = property(_icegiant.params_gwAmplitude_get, _icegiant.params_gwAmplitude_set)
    mission = property(_icegiant.params_mission_get, _icegiant.params_mission_set)

    def __init__(self):
        _icegiant.params_swiginit(self, _icegiant.new_params())
    __swig_destroy__ = _icegiant.delete_params

# Register params in _icegiant:
_icegiant.params_swigregister(params)

